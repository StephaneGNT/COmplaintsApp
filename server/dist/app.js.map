{"version":3,"sources":["../src/app.js"],"names":["express","require","bodyParser","app","use","urlencoded","extended","mongoose","server","listen","process","env","PORT","console","log","address","port","userSchema","Schema","firstName","String","lastName","role","password","email","Users","model","connect","db","connection","get","req","res","send","on","error","bind","once","find","response","docs"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;AAIA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA,IAAMA,UAAUC,QAAQ,SAAR,CAAhB;AACA,IAAMC,aAAYD,QAAQ,aAAR,CAAlB;AACA,IAAME,MAAMH,SAAZ;AACAG,IAAIC,GAAJ,CAAQF,WAAWG,UAAX,CAAsB,EAAEC,UAAU,IAAZ,EAAtB,CAAR;AACA,IAAIC,WAAWN,QAAQ,UAAR,CAAf;;AAEA,IAAIO,SAASL,IAAIM,MAAJ,CAAWC,QAAQC,GAAR,CAAYC,IAAZ,IAAoB,IAA/B,EAAqC,YAAY;AAC5DC,UAAQC,GAAR,CAAY,uBAAuBN,OAAOO,OAAP,GAAiBC,IAApD;AACD,CAFY,CAAb;;AAIA;AACA,IAAIC,aAAa,IAAIV,SAASW,MAAb,CAAoB;AACnCC,aAAWC,MADwB;AAEnCC,YAAUD,MAFyB;AAGnCE,QAAMF,MAH6B;AAInCG,YAAUH,MAJyB;AAKnCI,SAAMJ;AAL6B,CAApB,CAAjB;;AAQA;AACA,IAAIK,QAAQlB,SAASmB,KAAT,CAAe,MAAf,EAAuBT,UAAvB,CAAZ;;AAEAV,SAASoB,OAAT,CAAiB,mCAAjB;AACA,IAAIC,KAAKrB,SAASsB,UAAlB;;AAEA1B,IAAI2B,GAAJ,CAAQ,GAAR,EAAa,UAASC,GAAT,EAAcC,GAAd,EAAkB;AAC7BA,MAAIC,IAAJ,CAAS,gBAAT;AACD,CAFD;;AAIA9B,IAAI2B,GAAJ,CAAQ,QAAR,EAAkB,UAASC,GAAT,EAAcC,GAAd,EAAkB;AAClCnB,UAAQC,GAAR,CAAY,2BAAZ;AACAc,KAAGM,EAAH,CAAM,OAAN,EAAerB,QAAQsB,KAAR,CAAcC,IAAd,CAAmBvB,OAAnB,EAA4B,mBAA5B,CAAf;AACAe,KAAGS,IAAH,CAAQ,MAAR,EAAgB,YAAW;AACzB;AACAZ,UAAMa,IAAN,CAAW,UAACC,QAAD,EAAWC,IAAX,EAAoB;AAC7B3B,cAAQC,GAAR,CAAY,MAAZ,EAAoB0B,IAApB;AACD,KAFD;AAGD,GALD;AAMA;AACD,CAVD;;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA","file":"app.js","sourcesContent":["// const express = require('express');\n// const morgan = require('morgan');\n// const bodyParser= require('body-parser');\n// const app = express();\n// const MongoClient = require('mongodb').MongoClient;\n// // let db;\n\n// app.use(morgan('dev'));\n// app.use(bodyParser.urlencoded({ extended: true }));\n\n// app.use((req, res, next) => {\n//   res.header('Access-Control-Allow-Origin', '*');\n//   res.header('Access-Control-Allow-Headers', 'Authorization, Content-Type');\n//   res.header('Access-Control-Allow-Methods', 'POST, GET, PUT, DELETE, OPTIONS');\n//   next();\n// });\n\n// MongoClient.connect('mongodb://localhost:27017/', (err, client) => {\n//   if (err) return console.log(err)\n//   db = client.db('ComplaintsApp');\n//   app.listen(5000, () => {\n//     console.log('listening on 5000')\n//   });\n// });\n\n// app.get('/users', (req, res) => {\n//   db.collection('users').find().toArray((err, results) => {\n//     console.log(results);\n//   })\n// })\n\n// app.post('/users/:id', (req, res) => {\n//   db.collection('users').save(req.body, (err, result) => {\n//     if (err) return console.log(err)\n//     console.log('saved to database')\n//     res.redirect('/')\n//   })\n// })\n\n// // app.use(app.router);\n// // routes.initialize(app);\n\n\n\n// /// Error 404\n// // app.use(function (req, res, next) {\n// //   var err = new Error('Not Found');\n// //   err.status = 404;\n// //   next(err);\n// // });\n\n\n// let server = app.listen(process.env.PORT || 5000, function () {\n//   console.log('Listening on port ' + server.address().port);\n// });\n\nconst express = require('express');\nconst bodyParser= require('body-parser');\nconst app = express();\napp.use(bodyParser.urlencoded({ extended: true }));\nvar mongoose = require('mongoose');\n\nlet server = app.listen(process.env.PORT || 5000, function () {\n  console.log('Listening on port ' + server.address().port);\n});\n\n/* Création du User Schema selon les schémas mongoose */\nvar userSchema = new mongoose.Schema({\n  firstName: String,\n  lastName: String,\n  role: String,\n  password: String,\n  email:String,\n});\n\n/* Création du User model selon le schéma créé */\nvar Users = mongoose.model('User', userSchema);\n\nmongoose.connect('mongodb://localhost/ComplaintsApp');\nvar db = mongoose.connection;\n\napp.get('/', function(req, res){\n  res.send(\"Server started\")\n});\n\napp.get('/users', function(req, res){\n  console.log(\"users in app.js côté back\");\n  db.on('error', console.error.bind(console, 'connection error:'));\n  db.once('open', function() {\n    /* Récupération de tous les User de la db */\n    Users.find((response, docs) => {\n      console.log(\"docs\", docs);\n    });\n  });\n  // res.send(res)\n});\n\n/* Création d'un user (local) à partir du modèle user */\n// var DamienDubois = new Users({\n//   firstName: 'Damien',\n//   lastName: 'Dubois',\n//   role: 'SimpleUser',\n//   password: 'DamienDubois',\n//   email: 'damien.dubois@gmail.com'\n// });\n\n/* Ajout du User à la collection Users de la DB */\n// mongoose.connection.collection('Users').insertOne(DamienDubois);\n\n/* Suppression du User dont le firstName est Damien */\n// User.findOneAndDelete({firstName:'Damien'}, (res, docs) => {\n//   console.log(\"res\", docs);\n// });\n\n// /* Suppression de tous les User dont le firstName est Audrey */\n// User.deleteMany({firstName:'Audrey'}, (res, docs) => {\n//   console.log(\"res\", docs);\n// });"]}